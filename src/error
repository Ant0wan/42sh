build_redir.c:		n = &(r->next);
do_redir2.c:	if (valid_fd(r->redirectee.dest, 1))
do_redir2.c:	if (write(r->redirectee.dest, r->redirector.hereword,
do_redir2.c:				ft_strlen(r->redirector.hereword)) < 0)
do_redir2.c:	if (check_if_directory(r->redirectee.filename) == e_is_a_directory)
do_redir2.c:	else if (access(r->redirectee.filename, F_OK))
do_redir2.c:		r->redirectee.dest = open(r->redirectee.filename,
do_redir2.c:	else if (access(r->redirectee.filename, R_OK))
do_redir2.c:					r->redirectee.filename, e_cmd_type));
do_redir2.c:		r->redirectee.dest = open(r->redirectee.filename,
do_redir2.c:	if (r->redirectee.dest < 0)
do_redir2.c:		r->error = 1;
do_redir2.c:	if (r->flags & NOFORK)
do_redir2.c:		r->save[0] = dup(STDOUT_FILENO);
do_redir2.c:	if (r->flags & NOFORK)
do_redir2.c:		r->save[1] = dup(STDERR_FILENO);
do_redir2.c:	dup2(r->redirectee.dest, STDOUT_FILENO);
do_redir2.c:	dup2(r->redirectee.dest, STDERR_FILENO);
do_redir2.c:	close(r->redirectee.dest);
do_redir2.c:	if (r->flags & FDCLOSE)
do_redir2.c:		if (r->flags & NOFORK)
do_redir2.c:			r->save[0] = dup(r->redirectee.dest);
do_redir2.c:		close(r->redirectee.dest);
do_redir2.c:	else if (r->flags & FILENAME)
do_redir2.c:					r->redirector.filename, e_cmd_type));
do_redir2.c:	else if (r->flags & DEST)
do_redir2.c:		if (valid_fd(r->redirector.dest, 1))
do_redir2.c:		if (r->redirectee.dest == r->redirector.dest)
do_redir2.c:		if (r->flags & NOFORK)
do_redir2.c:			r->save[0] = dup(r->redirectee.dest);
do_redir2.c:		dup2(r->redirector.dest, r->redirectee.dest);
do_redir2.c:	if (r->flags & FILENAME && r->redirector.dest != STDOUT_FILENO)
do_redir2.c:					r->redirectee.filename, e_cmd_type));
do_redir2.c:	else if (r->flags & FILENAME)
do_redir2.c:		r->instruction |= IOWRITE;
do_redir2.c:	else if (r->flags & DEST)
do_redir2.c:		if (valid_fd(r->redirectee.dest, 1))
do_redir2.c:		if (r->redirectee.dest == r->redirector.dest)
do_redir2.c:		if (r->flags & NOFORK)
do_redir2.c:			r->save[0] = dup(r->redirector.dest);
do_redir2.c:		dup2(r->redirectee.dest, r->redirector.dest);
do_redir2.c:	else if (r->flags & FDCLOSE)
do_redir2.c:		if (r->flags & NOFORK)
do_redir2.c:			r->save[0] = dup(r->redirector.dest);
do_redir2.c:		close(r->redirector.dest);
do_redir3.c:	if (r->instruction == IOWRITE)
do_redir3.c:	else if (r->instruction == IOCAT)
do_redir3.c:	else if (r->instruction == IOREAD)
do_redir3.c:	else if (r->instruction == IOHERE)
do_redir3.c:	else if (r->instruction == IODUP)
do_redir3.c:	else if (r->instruction == (IODUP | IOREAD))
do_redir3.c:	else if (r->instruction == (IODUP | IOWRITE))
do_redir3.c:		if (r->error)
do_redir3.c:			if (r->flags & NOFORK)
do_redir3.c:			return (g_errordesc[r->error].code);
do_redir3.c:			if (r->flags & NOFORK)
do_redir3.c:		r->flags |= REDSUC;
do_redir3.c:		r = r->next;
do_redir.c:	if (check_if_directory(r->redirectee.filename) == e_is_a_directory)
do_redir.c:	else if (access(r->redirectee.filename, F_OK))
do_redir.c:		r->redirectee.dest = open(r->redirectee.filename,
do_redir.c:	else if (access(r->redirectee.filename, R_OK))
do_redir.c:					r->redirectee.filename, e_cmd_type));
do_redir.c:		r->redirectee.dest = open(r->redirectee.filename,
do_redir.c:	if (r->redirectee.dest < 0)
do_redir.c:	if (valid_fd(r->redirector.dest, 0))
do_redir.c:		close(r->redirectee.dest);
do_redir.c:	if (r->flags & NOFORK)
do_redir.c:		r->save[0] = dup(r->redirector.dest);
do_redir.c:	dup2(r->redirectee.dest, r->redirector.dest);
do_redir.c:	close(r->redirectee.dest);
do_redir.c:	if (check_if_directory(r->redirectee.filename) == e_is_a_directory)
do_redir.c:	else if (access(r->redirectee.filename, F_OK))
do_redir.c:		r->redirectee.dest = open(r->redirectee.filename,
do_redir.c:	else if (access(r->redirectee.filename, R_OK))
do_redir.c:						r->redirectee.filename, e_cmd_type));
do_redir.c:		r->redirectee.dest = open(r->redirectee.filename,
do_redir.c:	if (r->redirectee.dest < 0)
do_redir.c:	if (valid_fd(r->redirector.dest, 0))
do_redir.c:		close(r->redirectee.dest);
do_redir.c:	if (r->flags & NOFORK)
do_redir.c:		r->save[0] = dup(r->redirector.dest);
do_redir.c:	dup2(r->redirectee.dest, r->redirector.dest);
do_redir.c:	close(r->redirectee.dest);
do_redir.c:	if (check_if_directory(r->redirector.filename) == e_is_a_directory)
do_redir.c:	else if (valid_fd(r->redirectee.dest, 0))
do_redir.c:	else if (access(r->redirector.filename, F_OK))
do_redir.c:				r->redirector.filename, e_cmd_type));
do_redir.c:	else if (access(r->redirector.filename, R_OK))
do_redir.c:					r->redirector.filename, e_cmd_type));
do_redir.c:	r->redirector.dest = open(r->redirector.filename, O_RDONLY);
do_redir.c:	if (r->redirector.dest < 0)
do_redir.c:	if (r->flags & NOFORK)
do_redir.c:		r->save[0] = dup(r->redirectee.dest);
do_redir.c:	dup2(r->redirector.dest, r->redirectee.dest);
do_redir.c:	close(r->redirector.dest);
hash_table.c:	if (ft_strequ(hash_ptr->command_name, command_name))
hash_table.c:		hash_ptr->nb_called += nb;
launch_builtin.c:		r->flags |= NOFORK;
launch_builtin.c:		r = r->next;
redir_great2.c:	r->instruction = IODUP | IOWRITE;
redir_great2.c:	r->redirectee.filename = ft_strdup(get_tokvalue(*lst));
redir_great2.c:	if (treat_single_exp(&(r->redirectee.filename), 1))
redir_great2.c:		r->error = e_bad_substitution;
redir_great.c:		r->redirector.dest = STDOUT_FILENO;
redir_great.c:		r->redirector.dest = io_nb;
redir_great.c:	r->redirectee.filename = ft_strdup(get_tokvalue(*lst));
redir_great.c:	if (treat_single_exp(&(r->redirectee.filename), 1))
redir_great.c:		r->error = e_bad_substitution;
redir_great.c:	r->instruction = IOWRITE;
redir_great.c:	r->instruction = IOCAT;
redir_great.c:		r->redirector.dest = STDOUT_FILENO;
redir_great.c:		r->redirector.dest = io_nb;
redir_great.c:	r->instruction = IODUP;
redir_great.c:	r->redirectee.filename = ft_strdup(get_tokvalue(*lst));
redir_great.c:	if (ft_strcmp("-", r->redirectee.filename) && ha(r->redirectee.filename))
redir_great.c:		r->error = e_ambiguous_redirect;
redir_great.c:		psherror(e_ambiguous_redirect, r->redirectee.filename, e_cmd_type);
redir_great.c:		if (treat_single_exp(&(r->redirectee.filename), 1))
redir_great.c:			r->error = e_bad_substitution;
redir_less.c:		r->redirectee.dest = STDIN_FILENO;
redir_less.c:		r->redirectee.dest = io_nb;
redir_less.c:	r->instruction = IOREAD;
redir_less.c:	r->redirector.filename = ft_strdup(get_tokvalue(*lst));
redir_less.c:	if (treat_single_exp(&(r->redirector.filename), 1))
redir_less.c:		r->error = e_bad_substitution;
redir_less.c:		r->redirectee.dest = STDIN_FILENO;
redir_less.c:		r->redirectee.dest = io_nb;
redir_less.c:	r->instruction = IOHERE;
redir_less.c:	r->redirector.hereword = ft_strdup(get_tokvalue(*lst));
redir_less.c:	if (treat_single_exp(&(r->redirector.filename), 0))
redir_less.c:		r->error = e_bad_substitution;
redir_less.c:		r->redirectee.dest = STDIN_FILENO;
redir_less.c:		r->redirectee.dest = io_nb;
redir_less.c:	r->instruction = IODUP | IOREAD;
redir_less.c:	r->redirector.filename = ft_strdup(get_tokvalue(*lst));
redir_less.c:	if (treat_single_exp(&(r->redirector.filename), 1))
redir_less.c:		r->error = e_bad_substitution;
redir_less.c:	if (r->redirector.filename[0] == '-')
redir_less.c:		r->flags |= FDCLOSE;
redir_less.c:	else if (ft_str_is_numeric(r->redirector.filename))
redir_less.c:		r->redirector.dest = ft_atoifd(r->redirector.filename);
redir_less.c:		r->flags |= DEST;
redir_less.c:		r->flags |= FILENAME;
set_shell_var.c:	var->flag = set_flags(var->flag, flags);
set_shell_var.c:	flag = new_var->flag;
set_shell_var.c:		ft_swap_p((uintptr_t *)&orig_var->name, (uintptr_t *)&new_var->name);
set_shell_var.c:		ft_swap_p((uintptr_t *)&orig_var->value, (uintptr_t *)&new_var->value);
set_shell_var.c:		orig_var->flag = set_flags(orig_var->flag, flag);
set_shell_var.c:		new_var->flag = set_flags(0, flag);
set_shell_var.c:		ft_strdel(&new_var->name);
set_shell_var.c:		ft_strdel(&new_var->value);
treat_shell_variables.c:	return ((svar->flag & *flags) != *flags);
undo_redir2.c:	if (!restored_fd(*shell_fd, r->redirector.dest))
undo_redir2.c:		add_restored_fd(shell_fd, r->redirector.dest);
undo_redir2.c:		dup2(r->save[0], r->redirector.dest);
undo_redir2.c:	close(r->save[0]);
undo_redir2.c:	if (r->redirectee.dest == r->redirector.dest && !(r->flags & FDCLOSE))
undo_redir2.c:	if (!restored_fd(*shell_fd, r->redirectee.dest))
undo_redir2.c:		add_restored_fd(shell_fd, r->redirectee.dest);
undo_redir2.c:		dup2(r->save[0], r->redirectee.dest);
undo_redir2.c:	close(r->save[0]);
undo_redir2.c:	if (r->redirectee.dest == r->redirector.dest && !(r->flags & FDCLOSE))
undo_redir2.c:	if (!restored_fd(*shell_fd, r->redirectee.dest))
undo_redir2.c:		add_restored_fd(shell_fd, r->redirectee.dest);
undo_redir2.c:		dup2(r->save[0], r->redirector.dest);
undo_redir2.c:	close(r->save[0]);
undo_redir2.c:	if (r->redirectee.dest == r->redirector.dest)
undo_redir2.c:	close(r->redirectee.dest);
undo_redir2.c:		dup2(r->save[0], STDOUT_FILENO);
undo_redir2.c:	close(r->save[0]);
undo_redir2.c:		dup2(r->save[1], STDERR_FILENO);
undo_redir2.c:	close(r->save[1]);
undo_redir2.c:	if (r && (r->flags & REDSUC))
undo_redir2.c:		undo_redirection_internal(r->next, shell_fd);
undo_redir2.c:		if (r->instruction == IOWRITE)
undo_redir2.c:		else if (r->instruction == IOCAT)
undo_redir2.c:		else if (r->instruction == IOREAD)
undo_redir2.c:		else if (r->instruction == (IODUP | IOWRITE))
undo_redir2.c:		else if (r->instruction == (IODUP | IOREAD))
undo_redir2.c:		else if (r->instruction == IODUP)
undo_redir.c:		free_redirections(r->next);
undo_redir.c:		if (r->here_doc_eof)
undo_redir.c:			free(r->here_doc_eof);
undo_redir.c:		if (r->redirector.filename)
undo_redir.c:			free(r->redirector.filename);
undo_redir.c:		if (r->redirector.hereword)
undo_redir.c:			free(r->redirector.hereword);
undo_redir.c:		if (r->redirectee.filename)
undo_redir.c:			free(r->redirectee.filename);
undo_redir.c:		if (r->redirectee.hereword)
undo_redir.c:			free(r->redirectee.hereword);
